# This is a Docker Compose file that defines two services: frontend and backend.
# It is designed to run a web application with a React/Vite/Next.js frontend and a Node.js backend.

services:

  frontend:
    # 'container_name' gives your container a predictable name, making it easier to
    # find and manage in Docker Desktop or the command line.
    container_name: frontend-app
    # 'image' specifies the Docker image to use for this service.
    image: us-central1-docker.pkg.dev/fidgetech/fidgetech-images/whk-frontend:latest

    # The 'build' instruction tells Docker Compose to build an image from a Dockerfile.
    build:
      # 'context' specifies the path to the directory containing the Dockerfile and source code.
      # The '.' indicates that the context is the current directory where this docker-compose.yml file is located.
      # This assumes your project structure is like:
      # /project-root
      #   - docker-compose.yml
      #   - /fa-frontend
      #     - Dockerfile
      #     - package.json
      #     - ... your app files
      context: ./fa-frontend
      # 'dockerfile' specifies the name of the Dockerfile.
      # This is useful if your Dockerfile has a non-standard name, like 'Dockerfile.dev'.
      dockerfile: Dockerfile
    # 'platform' specifies the architecture for the image.
    # This is important if you're running on a specific architecture, like ARM or AMD64.
    # If you are building an image just for local OSX docker containers, you can use the default platform
    # by setting DOCKER_PLATFORM to linux/arm.
    platform: ${DOCKER_PLATFORM:-linux/amd64} # Uncomment this line if you want to use an environment variable for platform

    # 'ports' maps a port on the host machine to a port inside the container.
    # The format is "HOST_PORT:CONTAINER_PORT".
    # This example maps port 3000 on your local machine to port 3000 inside the container,
    # which is the default for many React/Vite/Next.js development servers.
    ports:
      - "3000:3000"

    # 'volumes' create a link between a directory on the host machine and a directory inside the container.
    # This is essential for development, as it allows changes you make to your code locally
    # to be immediately reflected inside the running container without rebuilding the image.
    volumes:
      # This line mounts the './frontend' directory from your host machine
      # to the '/app' directory inside the container.
      # Replace '/app' with the WORKDIR specified in your frontend's Dockerfile.
      - ./fa-frontend:/app

      # By adding a second entry for 'node_modules', we create an anonymous volume
      # for just that directory inside the container. This prevents the local 'node_modules'
      # (which might be built for a different OS, like macOS or Windows) from overwriting
      # the 'node_modules' inside the Linux-based container that was installed during the image build.
      # This is a crucial best practice for Node.js development with Docker.
      - /app/node_modules
    # 'depends_on' specifies that this service should start after the backend service is ready.
    depends_on:
      - backend

    # 'environment' variables can be passed directly into the container.
    # This is useful for variables that change between environments (dev, prod).
    # For example, to ensure a React development server works correctly with Docker's networking.
    environment:
      # For Create React App, this helps enable Fast Refresh when running in a container.
      - WDS_SOCKET_PORT=0
      # For Vite, this ensures the dev server is accessible from outside the container.
      - VITE_SERVER_HOST=true
      # Specify the back end URL for the frontend to connect to.  This is used to substitute the
      #__BACKEND_API_URL__ with http://localhost:8080 in env.js.
      - BACKEND_API_URL=http://localhost:8080

  backend:

    container_name: backend-app

    image: us-central1-docker.pkg.dev/fidgetech/fidgetech-images/whk-backend:latest

    # Map port 8080 from the container to port 8080 on your host machine
    ports:
      - "8080:8080"

    platform: ${DOCKER_PLATFORM:-linux/amd64} # Uncomment this line if you want to use an environment variable for platform

    # Define environment variables to be passed into the container
    # These override any values specified within the Dockerfile or the server.js itself
    environment:
      # These variables are read by your server.js to configure GCP services
      # Make sure to replace 'your-gcp-project-id', 'us-central1', and 'fidgetech-rag-docs'
      # with your actual Google Cloud Project ID, desired region, and GCS bucket name.
      GOOGLE_CLOUD_PROJECT_ID: "fidgetech"
      GOOGLE_CLOUD_LOCATION: "us-central1"
      GCS_BUCKET_NAME: "fidgetech-rag-docs"

      # This environment variable tells Google Cloud client libraries where to find the credentials.
      # It points to the path *inside the container* where the key file will be mounted.
      GOOGLE_APPLICATION_CREDENTIALS: "/app/gcp-key.json"

    # Define volumes to mount into the container
    volumes:
      # This is a bind mount that maps your local service account JSON key file
      # directly into the container.
      #
      # IMPORTANT:
      # Replace '/path/to/your/service-account-key.json' with the ACTUAL, full path
      # to your downloaded service account JSON key file on your host machine.
      #
      # The ':ro' at the end means the mounted file will be read-only inside the container,
      # which is a good security practice.
      - "./fa-backend/gcs-account.json:/app/gcp-key.json:ro"

    # The 'build' instruction tells Docker Compose to build an image from a Dockerfile.
    build:
      context: ./fa-backend # Path to your backend directory containing the Dockerfile
      dockerfile: Dockerfile

